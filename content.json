{"meta":{"title":"我的博客","subtitle":"zyyy","description":"今天跑步了吗","author":"zyyy","url":"http://example.com","root":"/"},"pages":[{"title":"分类","date":"2022-10-07T16:00:00.000Z","updated":"2022-10-08T14:05:40.344Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2018-06-07T14:17:49.000Z","updated":"2022-10-08T14:07:24.396Z","comments":true,"path":"link/index.html","permalink":"http://example.com/link/index.html","excerpt":"","text":""},{"title":"标签","date":"2022-10-08T14:03:47.000Z","updated":"2022-10-08T14:05:47.261Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Vue小总结","slug":"Vue小总结","date":"2022-11-12T05:57:17.000Z","updated":"2022-11-12T07:26:17.340Z","comments":true,"path":"2022/11/12/Vue小总结/","link":"","permalink":"http://example.com/2022/11/12/Vue%E5%B0%8F%E6%80%BB%E7%BB%93/","excerpt":"","text":"初学Vue小总结(记录 以便复习) 第一部分 (vue基础_基本指令)vue是什么？ Vue.js是一款流行的JavaScript前端框架，旨在更好地组织与简化Web开发。 为什么要学习vue? 随着项目业务场景的复杂,传统模式（html+jquery）已无法满足需求就出现了Angular&#x2F;React&#x2F;Vue等框架 主流框架之一(React Angular Vue)： React和Vue玩的最好的一手就是”数据的双向绑定” 易用、灵活、高效： 与jQuery请求拼字符串相比，Vue直接一个json串搞定 库和框架的区别 库(如jQuery) 库是一系列函数的集合. 提供大量API，体现了封装的思想、我们想要实现某个功能，需要自己调用这些API的方法（.css()、.style().color） 特点：开发人员说了算。 框架 框架提供了一套完整解决方案,它指定了一套规则，我们要使用这个框架，就要按照他们的规则去编写代码，编写好了之后，框架会在适当的时机去解析我们的代码 特点：框架说了算。 区别：控制反转(谁说了算，谁起主导作用) MVVM Vue 使用的是 MVVM 模式为什么要学习 MVVM ? MVVM &#x3D;&#x3D;&#x3D;&gt; M &#x2F; V &#x2F; VM M : model 数据层 V : view 视图层 VM : ViewModel 视图模型 核心 : V&lt;&#x3D;&#x3D;&#x3D;&gt; VM &lt;&#x3D;&#x3D;&#x3D;&gt; M 说明： 将从M层获取的msg：123填充到V层，大牛3行代码，小牛30行，小白300行，性能肯定是不一样的 而现在，不管大牛小牛小白，学了Vue之后，利用MVVM它来帮你做，达到性能统一 M：数据层，还是Model V：视图层，还是View VM（原来的C层）:ViewModel层 视图数据层（vm）,其实就是Vue的实例（官网中Vue vm &#x3D; new Vue()） 数据的双向绑定：单向更改，双向绑定 略…. Vue入门 vue的基本使用引入vue.js后: 参数详解 el el作用:指定当前Vue实例所管理的视图,值通常是id选择器 el的值可以是css选择器,通常是id选择器 el的值不能是html标签和body标签 data data作用:指定当前Vue实例的数据对象 data中的数据是响应式数据 值是一个对象 {属性: 值} 所有数据部分写在data中 在当前Vue实例所管理的视图中通过属性名使用data中的数据 可以通过vm.$data.属性 访问数据 可以通过vm.属性 访问数据(更简单) methods methods作用:指定当前Vue实例中的方法 可以直接通过vm实例访问这些方法， 方法中的 this 自动绑定为 Vue 实例 插值表达式 解释：使用&#123;&#123;&#125;&#125;（插值表达式）从data中获取数据，并展示在模板中 说明：&#123;&#123;&#125;&#125;中只能出现JavaScript表达式 说明：数据对象的属性值发生了改变，插值处的内容都会更新 表达式 - 运算符 : {{ msg + 500}} - 调用方法 : {{ [14,7].join('-') }} - 三元 : {{ true ? '真':''假 }} 不能使用语句 if语句 for语句 代码块演示 vue常用指令 v-text和v-html v-text:更新标签中的内容 v-text和插值表达式的区别 v-text 更新整个标签中的内容 插值表达式: 更新标签中局部的内容 v-html:更新标签中的内容&#x2F;标签 可以渲染内容中的HTML标签 注意:尽量避免使用，容易造成危险 (XSS跨站脚本攻击) 1234567891011121314151617181920212223242526272829303132&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- 设置vue所管理的视图 --&gt; &lt;div id=&quot;app&quot;&gt; &lt;!-- 获取Vue对象中data里的数据 --&gt; &lt;p&gt;&#123;&#123;text&#125;&#125;,我是p标签中的内容&lt;/p&gt; &lt;p v-text=&quot;text&quot;&gt;我是p标签中的内容&lt;/p&gt; &lt;p v-text=&quot;html&quot;&gt;我是p标签中的内容&lt;/p&gt; &lt;p v-html=&quot;text&quot;&gt;我是p标签中的内容&lt;/p&gt; &lt;p v-html=&quot;html&quot;&gt;我是p标签中的内容&lt;/p&gt; &lt;/div&gt; &lt;!-- 引入Vue.js文件 --&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt; &lt;!-- 创建Vue对象 --&gt; &lt;script type=&quot;text/javascript&quot;&gt; const vm = new Vue(&#123; el:&#x27;#app&#x27;, data:&#123; text:&#x27;点我试试看&#x27;, html:&#x27;&lt;a href=&quot;http://www.itcast.cn&quot;&gt;试试就试试&lt;/a&gt;&#x27; &#125; &#125;); &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; v-if和v-show作用:根据表达式的bool值进行判断是否渲染该元素 12345678910111213141516171819202122232425262728&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- 设置vue所管理的视图 --&gt; &lt;div id=&quot;app&quot;&gt; &lt;!-- 获取vue对象中data里的数据 --&gt; &lt;p v-if=&quot;isShow&quot;&gt;我是v-if数据&lt;/p&gt; &lt;p v-show=&quot;isShow&quot;&gt;我是v-show数据&lt;/p&gt; &lt;/div&gt; &lt;!-- 引入Vue.js --&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt; &lt;!-- 创建Vue对象 --&gt; &lt;script type=&quot;text/javascript&quot;&gt; new Vue(&#123; el:&#x27;#app&#x27;, data:&#123; isShow:false &#125; &#125;); &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 注：v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。 因此，如果需要非常频繁地切换，则使用 v-show 较好； 如果在运行时条件很少改变，则使用 v-if 较好。 v-on 作用:使用 v-on 指令绑定 DOM 事件，并在事件被触发时执行一些 JavaScript 代码。 语法: v-on:事件名.修饰符 = &quot;methods中的方法名&quot; ; v-on的简写方法: @事件名.修饰符 = &quot;methods中的方法名&quot; 修饰符 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot; xmlns:v-on=&quot;http://www.w3.org/1999/xhtml&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;button onclick=&quot;location.href=&#x27;http://www.baidu.com&#x27;&quot;&gt;百度&lt;/button&gt; &lt;button onclick=&quot;method1()&quot;&gt;百度&lt;/button&gt; &lt;div id=&quot;app&quot;&gt; &lt;!--需求: 点击按钮 修改 点击次数--&gt; &lt;!--在事件内 直接书写js代码--&gt; &lt;!--1 原始方式--&gt; &lt;button v-on:click=&quot;count++&quot;&gt;按钮1&lt;/button&gt; &lt;!--2 简化方式--&gt; &lt;button @click=&quot;count++&quot;&gt;按钮2&lt;/button&gt; &lt;!--3 给事件绑定方法--&gt; &lt;button @click=&quot;fn1()&quot;&gt;按钮3&lt;/button&gt; &lt;!--4 给事件绑定方法, 还要给方法传递参数--&gt; &lt;button @click=&quot;fn2(count)&quot;&gt;按钮4&lt;/button&gt; &lt;!--5 限制点击事件只会被执行一次--&gt; &lt;button @click=&quot;fn3()&quot;&gt;按钮5&lt;/button&gt; &lt;button @click=&quot;fn3&quot;&gt;按钮52222222&lt;/button&gt; &lt;button @click.once=&quot;fn3()&quot;&gt;按钮6&lt;/button&gt; &lt;p&gt;上面的按钮被点击的次数: &#123;&#123;count&#125;&#125;&lt;/p&gt; &lt;/div&gt; &lt;script src=&quot;js/vue.js&quot;&gt;&lt;/script&gt; &lt;script&gt; new Vue(&#123; el : &quot;#app&quot;, data : &#123; count : 0 &#125;, methods : &#123; fn1 : function() &#123; console.info(&quot;方法一 被调用了... ...&quot;) this.count++; &#125;, fn2 : function(cou) &#123; console.info(&quot;按钮被点击的次数: &quot; + cou); &#125;, fn3 : function () &#123; console.info(&quot;方法三 被调用了... ...&quot;) &#125; &#125; &#125;); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; v-forv-for作用: 列表渲染,当遇到相似的标签结构时,就用v-for去渲染 格式 123(item,index) in 数组参数item:数组中的每个元素参数index:数组中元素的下标 1234(value, key, index) in 对象参数index:对象中每对key-value的索引 从0开始参数key:键 参数value:值 代码演示 12345678910111213141516171819202122232425262728293031323334353637&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;app&quot;&gt; &lt;!--获取vue中data里面的数据--&gt; &lt;!--遍历数组--&gt; &lt;p v-for=&quot;(item, index) in arr&quot;&gt;&#123;&#123;index+1&#125;&#125; ===== &#123;&#123;item&#125;&#125;&lt;/p&gt; &lt;hr/&gt; &lt;!--遍历对象--&gt; &lt;p v-for=&quot;(value, key, index) in person&quot;&gt;&#123;&#123;index+1&#125;&#125; ==== &#123;&#123;key&#125;&#125; ==== &#123;&#123;value&#125;&#125;&lt;/p&gt; &lt;hr/&gt; &lt;!--遍历对象数组--&gt; &lt;p v-for=&quot;(person, index) in personArr&quot;&gt;&#123;&#123;index+1&#125;&#125; ===== &#123;&#123;person.name&#125;&#125; ==== &#123;&#123;person.age&#125;&#125; ===== &#123;&#123;person.gender&#125;&#125;&lt;/p&gt;&lt;/div&gt;&lt;script src=&quot;js/vue.js&quot;&gt;&lt;/script&gt;&lt;script&gt; new Vue(&#123; el : &quot;#app&quot;, data : &#123; arr : [&quot;张三&quot;, &quot;李四&quot;, &quot;王五&quot;], person : &#123;name:&quot;刘备&quot;, age:&quot;25&quot;, gender:&quot;男&quot;&#125;, personArr : [ &#123;name:&quot;刘备&quot;, age:&quot;25&quot;, gender:&quot;男&quot;&#125;, &#123;name:&quot;关羽&quot;, age:&quot;28&quot;, gender:&quot;男&quot;&#125;, &#123;name:&quot;张飞&quot;, age:&quot;29&quot;, gender:&quot;男&quot;&#125;, ] &#125; &#125;);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; v-bind作用: 可以绑定标签上的任何属性。格式: 1v-bind:属性=&quot;值&quot; 简写格式 1:属性=&quot;值&quot; 属性值一部分进行替换的格式 1:属性=&quot;&#x27;常亮值&#x27; + vue对象data中的数据&quot; 代码演示 123456789101112131415161718192021222324252627282930&lt;!DOCTYPE html&gt;&lt;html xmlns:v-bind=&quot;http://www.w3.org/1999/xhtml&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;v-bind&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;app&quot;&gt; &lt;font size=&quot;5&quot; v-bind:color=&quot;ys1&quot;&gt;传智播客&lt;/font&gt; &lt;font size=&quot;5&quot; :color=&quot;ys2&quot;&gt;黑马程序员&lt;/font&gt; &lt;hr&gt; &lt;a href=&quot;http://www.itcast.cn&quot;&gt;itcast&lt;/a&gt;&lt;br/&gt; &lt;a :href=&quot;&#x27;http://&#x27; + url&quot;&gt;京东&lt;/a&gt;&lt;br/&gt;&lt;/div&gt;&lt;script src=&quot;js/vue.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt; new Vue(&#123; el:&#x27;#app&#x27;, data:&#123; ys1:&quot;red&quot;, ys2:&quot;yellow&quot;, url:&quot;www.jd.cn&quot; &#125; &#125;);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; v-model作用: 表单元素的绑定 特点: 双向数据绑定 vue对象中的数据发生变化可以更新到界面 通过界面可以更改vue对象中数据 v-model 会忽略所有表单元素的 value、checked、selected 特性的初始值而总是将 Vue 实例的数据作为数据来源。应该在 data选项中声明初始值。 格式: ​ 在表单控件或者组件上创建双向绑定。细节请看下面的代码演示。 代码演示 123456789101112131415161718192021222324252627282930313233343536373839&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;v-model&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;app&quot;&gt; 姓名:&lt;input type=&quot;text&quot; id=&quot;username&quot; v-model=&quot;user.username&quot;&gt;&lt;br&gt; 密码:&lt;input type=&quot;password&quot; id=&quot;password&quot; v-model=&quot;user.password&quot;&gt;&lt;br&gt; &lt;input type=&quot;button&quot; @click=&quot;fun&quot; value=&quot;获取&quot;&gt; &lt;input type=&quot;button&quot; @click=&quot;fun2()&quot; value=&quot;修改&quot;&gt;&lt;/div&gt;&lt;script src=&quot;js/vue.js&quot;&gt;&lt;/script&gt;&lt;script&gt; new Vue(&#123; el: &#x27;#app&#x27;, //表示当前vue对象接管了div区域 data:&#123; //设置初始值 user:&#123;username:&quot;zhangsan&quot;,password:&quot;123&quot;&#125; , &#125;, methods:&#123; fun:function()&#123; //获取界面输入后,更新的值 console.info(this.user.username); console.info(this.user.password); &#125;, fun2:function() &#123; //对数据的值 再次赋值进行更新 this.user.username = &quot;武松&quot;; this.user.password = &quot;555555555&quot;; &#125; &#125; &#125;);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 第二部分 (生命周期)","categories":[],"tags":[{"name":"技术","slug":"技术","permalink":"http://example.com/tags/%E6%8A%80%E6%9C%AF/"}]},{"title":"SSM总结","slug":"SSM","date":"2022-10-10T01:56:25.000Z","updated":"2022-10-10T06:14:33.704Z","comments":true,"path":"2022/10/10/SSM/","link":"","permalink":"http://example.com/2022/10/10/SSM/","excerpt":"","text":"关于SSM的相关总结 准备通过这篇文章来总结一下SSM框架,也算是复习总结一下SSM框架就是 Spring + SpringMVC + MyBatis Spring1.Spring是什么？ 是一个轻量级的开源框架，是为解决企业应用开发的复杂性而创建的 是一个三层架构 Web层：Spring MVC； 业务层 ：Spring的IoC； 持久层 ：Spring的JDBC、ORM、等持久层框架； Spring的核心：控制反转(IoC)和面向切面编程(AOP)； IoC（Inverse of Control，控制反转）: 指的是将对象的创建权交给 Spring 去创建。 使用 Spring 之前， 对象的创建都是由我们使用 new 创建，而使用 Spring 之后，对象的 创建都交给了 Spring 框架。 AOP（Aspect Oriented Programming，面向切面编程）: AOP 用来封装多个类的公共行为，将那些与业务无关， 却为业务模块所共同调用的逻辑封装起来，减少系统的重复 代码，降低模块间的耦合度。另外，AOP还解决一些系统层 面上的问题，比如日志、事务、权限等。 2.Spring是干什么的？ 方便解耦，简化开发； 方便的对程序进行拦截、运行、监控等功能； 可以对事务声明； 属于一个万能的框架，方便集成各种优秀框架； 降低 Java EE API 的使用难度 （Spring 对 Java EE 开发中非常难用的一些 API（JDBC、JavaMail、远程调用等）都提供了封装，使这些 API 应用的难度大大降低） 方便程序的测试 3.Spring怎么用？ 这里我就不概述了，具体怎么用可以去百度、查API SpringMVC1.SpringMVC是什么？ 可以将SpringMVC看成Spring的一个组件 Spring MVC 是 Spring 提供的一个基于 MVC 设计模式的轻量级 Web 开发框架，本质上相当于 Servlet。Spring MVC 角色划分清晰，分工明细，并且和 Spring 框架无缝结合。Spring MVC 是当今业界最主流的 Web 开发框架，以及最热门的开发技能。在 Spring MVC 框架中，Controller 替换 Servlet 来担负控制器的职责，用于接收请求，调用相应的 Model 进行处理，处理器完成业务处理后返回处理结果。Controller 调用相应的 View 并对处理结果进行视图渲染，最终客户端得到响应信息。 Spring MVC 框架采用松耦合可插拔的组件结构，具有高度可配置性，比起其它 MVC 框架更具有扩展性和灵活性。此外，Spring MVC 的注解驱动和对 REST 风格的支持，也是它最具特色的功能。无论是在框架设计，还是扩展性、灵活性等方面都全面超越了 Struts2 等 MVC 框架。并且由于 Spring MVC 本身就是 Spring 框架的一部分，所以可以说与 Spring 框架是无缝集成，性能方面具有先天的优越性，对于开发者来说，开发效率也高于其它的 Web 框架，在企业中的应用越来越广泛，成为主流的 MVC 框架。 SpringMVC的优点 清晰地角色划分，Spring MVC在Model、View和Controller方面提供了一个非常清晰的角色划分，这3个方面真正是各司其职，各负其责。 灵活的配置功能，可以把类当作 Bean 通过 XML 进行配置。 提供了大量的控制器接口和实现类，开发者可以使用 Spring 提供的控制器实现类，也可以自己实现控制器接口。 真正做到与 View 层的实现无关。它不会强制开发者使用 JSP，可以根据项目需求使用 Velocity、FreeMarker 等技术。 国际化支持 面向接口编程 与 Spring 框架无缝集成 流程图 MyBatis1.MyBatis是什么？ MyBatis是一款优秀的持久层框架 它支持定制化SQL、存储过程以及高级映射。 Mybatis避免了几乎所有的JDBC代码和手动设置参数以及获取结果集。 Mybatis可以使用简单的XML或注解来配置和映射原生类型、接口和Java的POJO(Plain Old Java Object普通老式Java对象)为数据库中的记录。 小小的扩展几个点持久化持久化是将程序数据在持久状态和瞬时状态间转换的机制 即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。持久化的主要应用是将内存中的对象存储在数据库中，或者存储在磁盘文件中、XML数据文件中等等。 JDBC就是一种持久化机制。文件IO也是一种持久化机制。 在生活中 : 将鲜肉冷藏，吃的时候再解冻的方法也是。将水果做成罐头的方法也是。 为什么需要持久化服务呢？那是由于内存本身的缺陷引起的 内存断电后数据会丢失，但有一些对象是无论如何都不能丢失的，比如银行账号等，遗憾的是，人们还无法保证内存永不掉电。 内存过于昂贵，与硬盘、光盘等外存相比，内存的价格要高2~3个数量级，而且维持成本也高，至少需要一直供电吧。所以即使对象不需要永久保 存，也会因为内存的容量限制不能一直呆在内存中，需要持久化来缓存到外存。 持久层 完成持久化工作的代码块 . ——&gt; dao层 【DAO (Data Access Object) 数据访问对象】 大多数情况下特别是企业级应用，数据持久化往往也就意味着将内存中的数据保存到磁盘上加以固化，而持久化的实现过程则大多通过各种关系数据库来完成。 不过这里有一个字需要特别强调，也就是所谓的“层”。对于应用系统而言，数据持久功能大多是必不可少的组成部分。也就是说，我们的系统中，已经天然的具备了“持久层”概念？也许是，但也许实际情况并非如此。之所以要独立出一个“持久层”的概念,而不是“持久模块”，“持久单元”，也就意味着，我们的系统架构中，应该有一个相对独立的逻辑层面，专注于数据持久化逻辑的实现. 与系统其他部分相对而言，这个层面应该具有一个较为清晰和严格的逻辑边界。【说白了就是用来操作数据库存在的！】 2.为什么需要MyBatis？ Mybatis就是帮助程序猿将数据存入数据库中 , 和从数据库中取数据 . 传统的jdbc操作 , 有很多重复代码块 .比如 : 数据取出时的封装 , 数据库的建立连接等等… , 通过框架可以减少重复代码,提高开发效率 . MyBatis 是一个半自动化的ORM框架 (Object Relationship Mapping) —&gt;对象关系映射 所有的事情，不用Mybatis依旧可以做到，只是用了它，所有实现会更加简单！技术没有高低之分，只有使用这个技术的人有高低之别 MyBatis的优点 简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件就可以了，易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。 灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。 解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。 提供xml标签，支持编写动态sql。 简单了解后我们就大概了解了什么是SSM SSM 框架业务执行流程图 SSM程序流程 1.整个SSM框架使用maven依赖管理和构建，将其打包成war包，部署到服务器将其运行。使用spring boot框架也可以打包成jar包部署。 2.SSM项目一般分为前端和后端两个部分，前端页面UI界面用bootstrap和jsp或者现在流行的vue等技术实现，后台则由SSM框架来搭建和编写，前后端交互部分则由ajax俩发送请求来处理。 3.springMVC控制器，用于页面的跳转请求和对具体的视图解析，而处理不了的请求则交给tomcat服务器来处理。 4.编写对应的Mappper接口以及Mapper文件，将其扫描进spring的ioc容器中，再由mybatis将对数据库的增删改查。 5.在spring容器中，有三层架构–&gt;Controller，Service，Dao层，分别处理不同的事务逻辑 6.有前端发送ajax请求给springMVC，后springMVC将其数据解析成json数据返回给前端页面，在前端用js解析成json在前端显示。 7.增删改查操作都是有ajax请求来处理。 8.具体的流程图由下图所示： spring将各层进行整合 通过spring管理持久层的mapper（dao接口） 通过spring管理业务层service，service中可以调用mapper接口 spring进行事物管理 通过spring管理表现层Handle，Handle中可以调用service接口。 mapper、service、Handle都是javabean 以上就是编程小白关于SSM的总结了 不过是参考百度、csdn大佬的文章,大家参考参考就好了~","categories":[],"tags":[{"name":"技术","slug":"技术","permalink":"http://example.com/tags/%E6%8A%80%E6%9C%AF/"}]},{"title":"20岁","slug":"20岁","date":"2022-10-08T08:23:39.000Z","updated":"2022-10-09T13:16:34.076Z","comments":true,"path":"2022/10/08/20岁/","link":"","permalink":"http://example.com/2022/10/08/20%E5%B2%81/","excerpt":"","text":"关于生日今天十月八号了，前几天放国庆在家休息了几天、顺便过了自己的二十岁生日，口罩的原因，只是喊上几个亲朋好友在家吃了顿饭，想想也有点感慨，自己怎么就二十岁了,都说十八岁后人生就像按了加速键,好像也确实如此.明年这个时候我也应该在公司上班了.还是希望自己能更加自律吧，自己约束自己, 加油. &gt; 跑步是个好习惯，继续坚持 &gt; 健身也不能少，坚持 &gt; 身体是革命的本钱","categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://example.com/tags/%E9%9A%8F%E7%AC%94/"}]},{"title":"如何搭建博客","slug":"我的第一篇博客文章","date":"2022-09-06T15:35:57.000Z","updated":"2022-10-10T07:17:10.264Z","comments":true,"path":"2022/09/06/我的第一篇博客文章/","link":"","permalink":"http://example.com/2022/09/06/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/","excerpt":"","text":"如何搭建博客? 具体如何搭建博客我就不啰嗦了参考视频：视频链接 搭建完后可以下载不同的博客主题我个人使用的是 yilia和butterfly 大家可以任选其一，当然也可以去查找不一样的主题 推荐文档教程： butterfly主题链接 详细教程文档可以百度，教程也比较详细","categories":[],"tags":[{"name":"技术","slug":"技术","permalink":"http://example.com/tags/%E6%8A%80%E6%9C%AF/"}]}],"categories":[],"tags":[{"name":"技术","slug":"技术","permalink":"http://example.com/tags/%E6%8A%80%E6%9C%AF/"},{"name":"随笔","slug":"随笔","permalink":"http://example.com/tags/%E9%9A%8F%E7%AC%94/"}]}